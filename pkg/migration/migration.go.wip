package main

import (
	"encoding/json"
	"fmt"
	"os"
	"errors"

	_ "github.com/grcatterall/go-web-server/pkg/utils"
)

type Column struct {
    Name      string `json:"name"`
    Type      string `json:"type"`
    PrimaryKey bool  `json:"primary_key,omitempty"`
    Unique    bool   `json:"unique,omitempty"`
}

type Table struct {
    Name    string   `json:"name"`
    Columns []Column `json:"columns"`
}

type Schema struct {
    Tables []Table `json:"tables"`
}

func loadSchema(filename string) (*Schema, error) {
	data, err := os.ReadFile(filename)

	if err != nil {
		return nil, err
	}

	var schema Schema
	err = json.Unmarshal(data, &schema)

	if err != nil {
		return nil, err
	}

	return &schema, nil
}

func main() {
	newSchema, err := loadSchema("schemas/schema.json")

	if err != nil {
		fmt.Println(err)
	}

	currentSchemaExists := true


	currentSchema, err := loadSchema("schemas/applied-schema.json")

	if err != nil {
		if errors.Is(err, os.ErrNotExist) {
			fmt.Println("No current schema found, creating new one")
			currentSchemaExists = false
		} else {
			fmt.Println(err)
		}
	}

	fmt.Print(newSchema)
	fmt.Println(currentSchema)
	fmt.Println(currentSchemaExists)
}

func diffSchemas(oldSchema, newSchema *Schema) []string {
	var changes []string

	for _, newTable := range newSchema.Tables {
		found := false
		for _, oldTable := range oldSchema.Tables {
			if newTable.Name == oldTable.Name {
				for _, newCol := range newTable.Columns {

				}

				break
			} else {
				createString := "CREATE TABLE"
				changes = append(changes, fmt.Sprintf())
			}
		}
	}
}