// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	models "github.com/grcatterall/go-web-server/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// ProductRepository is an autogenerated mock type for the ProductRepository type
type ProductRepository struct {
	mock.Mock
}

// CreateProduct provides a mock function with given fields: product
func (_m *ProductRepository) CreateProduct(product models.Product) (models.Product, error) {
	ret := _m.Called(product)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Product) (models.Product, error)); ok {
		return rf(product)
	}
	if rf, ok := ret.Get(0).(func(models.Product) models.Product); ok {
		r0 = rf(product)
	} else {
		r0 = ret.Get(0).(models.Product)
	}

	if rf, ok := ret.Get(1).(func(models.Product) error); ok {
		r1 = rf(product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProduct provides a mock function with given fields: id
func (_m *ProductRepository) DeleteProduct(id string) (bool, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProduct")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllProducts provides a mock function with given fields:
func (_m *ProductRepository) GetAllProducts() ([]models.Product, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllProducts")
	}

	var r0 []models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Product, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Product)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductById provides a mock function with given fields: id
func (_m *ProductRepository) GetProductById(id string) (models.Product, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetProductById")
	}

	var r0 models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.Product, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) models.Product); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Product)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductByName provides a mock function with given fields: name
func (_m *ProductRepository) GetProductByName(name string) (models.Product, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetProductByName")
	}

	var r0 models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.Product, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) models.Product); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(models.Product)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProduct provides a mock function with given fields: id, product
func (_m *ProductRepository) UpdateProduct(id string, product models.Product) (models.Product, error) {
	ret := _m.Called(id, product)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProduct")
	}

	var r0 models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(string, models.Product) (models.Product, error)); ok {
		return rf(id, product)
	}
	if rf, ok := ret.Get(0).(func(string, models.Product) models.Product); ok {
		r0 = rf(id, product)
	} else {
		r0 = ret.Get(0).(models.Product)
	}

	if rf, ok := ret.Get(1).(func(string, models.Product) error); ok {
		r1 = rf(id, product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProductRepository creates a new instance of ProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductRepository {
	mock := &ProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
